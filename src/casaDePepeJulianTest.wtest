import casa.*
import estrategiasDeAhorro.*
import cuentasBancarias.*


describe "casaDePepeJulian"{
	
	test "Hacer que se rompa algo de 1000 pesos de la casa, aumentando el monto de reparación" {
		casaDePepeYJulian.hacerMantenimiento(1000)
		assert.equals(1000, casaDePepeYJulian.monto())
		assert.equals(true, casaDePepeYJulian.tieneViveresSuficientes())
		assert.equals(true, casaDePepeYJulian.hayQueHacerReparaciones())
		assert.equals(false, casaDePepeYJulian.estaEnOrden())
	}
	
	test "para una cuenta vacía con 20 pesos de costo por operación, si se deposita 1000 pesos, el saldo queda en 980 pesos."{
		cuentaConGastos.setCosto(20)
		cuentaConGastos.depositar(1000)//hacer un seter para setear la el gasto de operacion
		assert.equals(980, cuentaConGastos.saldo())
		
	}
	
	test "Se depositan 100 pesos en la cuenta combinada (van a la cuenta con gastos, porque es la primaria, depositándose 50 pesos efectivos).
Si se extraen 200 pesos (salen de la cuenta corriente, ya que a la primaria no le alcanza, dejándola en 300 pesos).
Verificar que el saldo de la cuenta con gastos queda en 50 pesos, la cuenta corriente con 300 pesos y la combindada con 350 pesos."{
		
		cuentaConGastos.setCosto(50)
		cuentaCombinada.depositar(100) 
		assert.equals(50, cuentaConGastos.saldo())
		cuentaCorriente.setSaldo(500)
		cuentaCombinada.extraer(200)
		assert.equals(300, cuentaCorriente.saldo()) // Set del saldo en cuenta corriente
		assert.equals(350, cuentaCombinada.saldo())
	}
	
	
	test "Se pide poder generar un gasto por un importe determinado en la casa, y que eso se vea afectado en la cuenta elegida previamente."{
		cuentaCorriente.setSaldo(500)
		casaDePepeYJulian.hacerMantenimiento(30)
		assert.equals(30, casaDePepeYJulian.monto())
		assert.equals(470, casaDePepeYJulian.saldoCuentaBancaria())
	}
	
	test"Si la casa tiene 50% de los víveres, necesita 100 pesos para reparaciones, tiene asociada la cuenta corriente con 1000 pesos de saldo y una estrategia de ahorro Full. Al hacer un mantenimiento de la casa"{
		casaDePepeYJulian.setPorcentajeDeViveres(50)
		casaDePepeYJulian.setCuentaBancaria(cuentaCorriente)
		cuentaCorriente.setSaldo(1000)
		casaDePepeYJulian.setEstrategia(full) 
		casaDePepeYJulian.mantenimientoSemanal() 
		assert.equals(40, casaDePepeYJulian.porcentajeDeViveres())
		assert.equals(true, casaDePepeYJulian.hayQueHacerReparaciones())
		assert.equals(true ,casaDePepeYJulian.monto() > 1000)
		
		assert.equals(90,casaDePepeYJulian.porcentajeDeViveres())
		assert.equals(100,casaDePepeYJulian.monto())
		assert.equals(800,casaDePepeYJulian.saldoCuentaBancaria())
		
	}
}
 